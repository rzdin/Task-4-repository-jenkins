pipeline {
     agent any 
        
        
        
        environment {
        bucket = "confluence-assessments-task-4-enquizit-2022"          //artifact deployment S3 buckets 
        region = "us-east-1"                     //artifact deployment bucket region 
        region1 = "us-east-2"                    //artifact upload bucket region 
        aws_credential = "AWSReservedSSO_AdministratorAccess_564bcbbbca5e5655/rzdin@enquizit.com" //aws credentials 
        application_name = "Nodejs" 
        DOCKERHUB_CREDENTIALS = "rzdin-dockerhub"
        
           
        
       
       
    }
       tools { 
                     maven 'maven' 
                     jdk 'JAVA_HOME' 
   }
    stages {
        stage('Build') {
             
            steps {
                sh 'mvn -B -DskipTests clean package -D v=${BUILD_NUMBER}'
            }
             post {
                always {
                    emailext attachLog: true, body: 'This is an build log email ', subject: 'build status ', to: 'ziauddinrana3361@gmail.com'
                }
            }
        }
        stage('Test') {
              
            steps {
                sh 'mvn test'
            }
            post {
                always {
                    junit 'target/surefire-reports/*.xml'
                     emailext attachLog: true, body: 'This is an test log email ', subject: 'test status ', to: 'ziauddinrana3361@gmail.com'
                }
            }
        }

          stage('docker image build/push') {
                when {
                    expression {
                         currentBuild.result == null || currentBuild.result == 'SUCCESS' 
              }
        }
             
            steps {
            
               script{
                 
                   docker.withRegistry( 'https://index.docker.io/v1/',  DOCKERHUB_CREDENTIALS ) {
                   def app = docker.build("rzdin/my-java-app2:${BUILD_NUMBER}", '.').push()
               }           
           }
        }
         post {
                always {
                    emailext attachLog: true, body: 'This is an image log email ', subject: 'image status ', to: 'ziauddinrana3361@gmail.com'
                   
              }
         }
     }  
          stage('DEV env deploy') {
              
             
              steps {
            
                script{
                   sh 'docker pull rzdin/my-java-app2:${BUILD_NUMBER}'
                   sh 'docker run --name Task-4-Container -p 80:80 -d rzdin/my-java-app2:${BUILD_NUMBER}'
               }           
           }
            post {
                always {
                    emailext attachLog: true, body: 'This is a docker run log email ', subject: '[Jenkins]${currentBuild.fullDisplayName}', to: 'ziauddinrana3361@gmail.com'
             }
         }
     } 
       stage ('Approval Stage') {
        
                steps { 
                    script {
                          emailext mimeType: 'text/html',
                                   subject: "[Jenkins]${currentBuild.fullDisplayName}",
                                   to: "ziauddinrana3361@gmail.com",
                                   body: '''<a href="${BUILD_URL}input">click to approve</a>'''
                          env.APPROVED_DEPLOY = input message: 'User input required',
                          parameters: [choice(name: 'Deploy?', choices: 'no\nyes', description: 'Choose "yes" if you want to deploy this build')]
                        
                         
                         
           } 
        }
            
    }
      stage('abortdeploy'){
           when{
               environment name:'APPROVED_DEPLOY',value:'no'
           }
           steps{
               sh 'docker container rm -f Task-4-Container'
               
               }
           post {
               always{
                  emailext attachLog: true, subject:'Deployment Aborted',body:'The deployment has been aborted. Here are the details: Project Name: ${currentBuild.projectName} Build #: ${currentBuild.number}', to: 'ziauddinrana3361@gmail.com'
               }
           }
       }
        stage('S3 Prod Env'){ //This stage deploy the artifacts from the copy build artifacts stage to se dployement bucket 
        
          when {
                   environment name:'APPROVED_DEPLOY', value: 'yes'
                }
              
             
           
            steps{
                 sh'''#!/bin/bash
                    mv ./target/Task4Demo-0.0.1-${BUILD_NUMBER}-SNAPSHOT.jar  .
                 '''
                   withAWS(credentials: "${aws_credential}", region: "${region}"){
                     
                        s3Upload(file:"Task4Demo-0.0.1-${BUILD_NUMBER}-SNAPSHOT.jar", bucket:"${bucket}")
        }
     }
            post {
                always {
                    emailext attachLog: true, body: 'This is a artifact pushed log email ', subject: 'artifact run status ', to: 'ziauddinrana3361@gmail.com'
                   
              }
         }
     }
}
}
