/* Created Date: 07/03/2022
# (c) Enquizit, Inc 2022
# JenkinsFile (Declarative) 
# v1 
# Revision History
# ----------------
# version   date        contributors    changes
# -------   ----        ------------    -------
# 1.0       07/03/2022      rz          initial revision
#=============================================================================
# This file contains stage for the implementation of jenkins CI/CD pipline
#=============================================================================
*/

pipeline {
     agent any 
        
        
        
        environment {
        //artifact deployment S3 bucket.    
        bucket = "confluence-assessments-task-4-enquizit-2022" 
        //artifact deployment bucket region          
        region = "us-east-1"  
        //artifact upload bucket region. (optional)                    
        region1 = "us-east-2" 
        //aws credentials                    
        aws_credential = "AWSReservedSSO_AdministratorAccess_564bcbbbca5e5655/rzdin@enquizit.com" //aws credentials 
        // Dockerhub credentials to push and pull images. 
        DOCKERHUB_CREDENTIALS = "rzdin-dockerhub"
        
           
        
       
       
    } // Defined tools to build Spring Boot Java Application. 
       tools { 
                     maven 'maven' 
                     jdk 'JAVA_HOME' 
   }// Stages Defined For Jenkins Declarative Pipeline 
    stages {
        // Stage one build the application and makes a jar file using Maven
        stage('Build') {
             
            steps {
                sh 'mvn -B -DskipTests clean package -D v=${BUILD_NUMBER}'
            }
             post { // Post Stage defined to send an email notification to the developer about the build. 
                always {
                    emailext attachLog: true, body: 'This is an build log email ', subject: 'build status ', to: 'ziauddinrana3361@gmail.com'
                }
            }
        }
        // Stage two is test Stage. This Stage Tests the application using the test cases defined in the application source code
        stage('Test') {
              
            steps {
                sh 'mvn test'
            }
            post {// Post Stage defined to develop test reports and store them in target directory in the workspace 
                  // Post stage also sends send an email notification to the developer about the test.
                always {
                    junit 'target/surefire-reports/*.xml'
                     emailext attachLog: true, body: 'This is an test log email ', subject: 'test status ', to: 'ziauddinrana3361@gmail.com'
                }
            }
        }
          // Stage three Build the docker image using the Dockerfile present inside the working directory.  
          stage('docker image build/push') {
                when { // When condition applied to this stage to only build and push the docker image when the build is successful. 
                    expression {
                         currentBuild.result == null || currentBuild.result == 'SUCCESS' 
              }
        }
             
            steps {
            
               script{// This is the script that build and push the Docker image of the application.
                 
                        docker.withRegistry( 'https://registry.hub.docker.com',  DOCKERHUB_CREDENTIALS ) {
                        def app = docker.build("rzdin/task4:${BUILD_NUMBER}", '.').push()
               }           
           }
        }
         post { // Post Stage defined to send an email notification to the developer about the the build and push of the docker image.
                always {
                    emailext attachLog: true, body: 'This is an image log email ', subject: 'image status ', to: 'ziauddinrana3361@gmail.com'
                   
              }
         }
     }    // This Stage four is the Dev stage environment. If the application is build success fully will be deployed to Prod environment.
          stage('DEV env deploy') {
              
             
              steps {
            
                script{// This script pull the build image and run it inside a docker conatainer on the same Ec2 server used for jenkins.
                         docker.withRegistry( 'https://registry.hub.docker.com',  DOCKERHUB_CREDENTIALS ) { 
                         image = docker.image("rzdin/task4:${BUILD_NUMBER}")
                         image.pull()
                         sh'docker run --name Task-4-Container -p 80:80 -d rzdin/task4:${BUILD_NUMBER}'
                  }
               }           
           }
            post { // Post Stage defined to send an email notification to the developer about the the deployment in dev stage environment.
                always {
                    emailext attachLog: true, body: 'This is a docker run log email ', subject: '[Jenkins]${BUILD_NUMBER}', to: 'ziauddinrana3361@gmail.com'
             }
         }
     } // This Stage five is and Approval stage for the for the deployment in the Prod environment. (Prod envitonment here is S3 bucket)
       stage ('Approval Stage') {
        
                steps { 
                    script { //This script send an approval notification to the manager for the approval so that the application can be deployed in the Prod environment. 
                          emailext mimeType: 'text/html',
                                   subject: "[Jenkins]${currentBuild.fullDisplayName}",
                                   to: "ziauddinrana3361@gmail.com",
                                   body: '''<a href="${BUILD_URL}input">${BUILD_URL}</a>'''
                          env.APPROVED_DEPLOY = input message: 'User input required',
                          parameters: [choice(name: 'Deploy?', choices: 'no\nyes', description: 'Choose "yes" if you want to deploy this build')]
                        
                         
                         
           } 
        }
            
    } // This Sixth stage is abortdeploy stage is executed if the approval from the manager is in rejected state. We can use this for a roll back. 
      // but in this case it just removes the container fro the dev stage. 
      stage('abortdeploy'){
           when{
               environment name:'APPROVED_DEPLOY',value:'no'
           }
           steps{
               sh 'docker container rm -f Task-4-Container'
               
               }
           post { // Post Stage defined to send an email notification to the developer about the the rejection of the application for deployment in Prod environment.
               always{
                  emailext attachLog: true, subject:'Deployment Aborted',body:'The deployment has been aborted. Here are the details: Project Name: ${currentBuild.projectName} Build #: ${currentBuild.number}', to: 'ziauddinrana3361@gmail.com'
               }
           }
       } // This Stage Seven is the stage environment for Prodution and is executed to deploy the artifact of the successful build to S3 bucket if approved by the manager. 
        stage('S3 Prod Env'){ 
        
          when {
                   environment name:'APPROVED_DEPLOY', value: 'yes'
                }
              
             
           
            steps{
                 sh'''#!/bin/bash
                    mv ./target/Task4Demo-0.0.1-${BUILD_NUMBER}-SNAPSHOT.jar  .

                 '''
                   withAWS(credentials: "${aws_credential}", region: "${region}"){
                     
                        s3Upload(file:"Task4Demo-0.0.1-${BUILD_NUMBER}-SNAPSHOT.jar", bucket:"${bucket}")
        }
     }
            post { // Post Stage defined to send an email notification to the developer about the the deployment of the application in Prod environment.
                always {
                    emailext attachLog: true, body: 'This is a artifact pushed log email ', subject: 'artifact Deployed Status ${BUID_NUMBER} ', to: 'ziauddinrana3361@gmail.com'
                   
              }
         }
     }
}
}
